{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>super_bowl</th>\n",
       "      <th>venue</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>attendance</th>\n",
       "      <th>team_winner</th>\n",
       "      <th>winning_pts</th>\n",
       "      <th>qb_winner_1</th>\n",
       "      <th>qb_winner_2</th>\n",
       "      <th>coach_winner</th>\n",
       "      <th>team_loser</th>\n",
       "      <th>losing_pts</th>\n",
       "      <th>qb_loser_1</th>\n",
       "      <th>qb_loser_2</th>\n",
       "      <th>coach_loser</th>\n",
       "      <th>combined_pts</th>\n",
       "      <th>difference_pts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-02-04</td>\n",
       "      <td>52</td>\n",
       "      <td>U.S. Bank Stadium</td>\n",
       "      <td>Minneapolis</td>\n",
       "      <td>Minnesota</td>\n",
       "      <td>67612</td>\n",
       "      <td>Philadelphia Eagles</td>\n",
       "      <td>41</td>\n",
       "      <td>Nick Foles</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Doug Pederson</td>\n",
       "      <td>New England Patriots</td>\n",
       "      <td>33</td>\n",
       "      <td>Tom Brady</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Bill Belichick</td>\n",
       "      <td>74</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-02-05</td>\n",
       "      <td>51</td>\n",
       "      <td>NRG Stadium</td>\n",
       "      <td>Houston</td>\n",
       "      <td>Texas</td>\n",
       "      <td>70807</td>\n",
       "      <td>New England Patriots</td>\n",
       "      <td>34</td>\n",
       "      <td>Tom Brady</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Bill Belichick</td>\n",
       "      <td>Atlanta Falcons</td>\n",
       "      <td>28</td>\n",
       "      <td>Matt Ryan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Dan Quinn</td>\n",
       "      <td>62</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-02-07</td>\n",
       "      <td>50</td>\n",
       "      <td>Levi's Stadium</td>\n",
       "      <td>Santa Clara</td>\n",
       "      <td>California</td>\n",
       "      <td>71088</td>\n",
       "      <td>Denver Broncos</td>\n",
       "      <td>24</td>\n",
       "      <td>Peyton Manning</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Gary Kubiak</td>\n",
       "      <td>Carolina Panthers</td>\n",
       "      <td>10</td>\n",
       "      <td>Cam Newton</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ron Rivera</td>\n",
       "      <td>34</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-02-01</td>\n",
       "      <td>49</td>\n",
       "      <td>University of Phoenix Stadium</td>\n",
       "      <td>Glendale</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>70288</td>\n",
       "      <td>New England Patriots</td>\n",
       "      <td>28</td>\n",
       "      <td>Tom Brady</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Bill Belichick</td>\n",
       "      <td>Seattle Seahawks</td>\n",
       "      <td>24</td>\n",
       "      <td>Russell Wilson</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Pete Carroll</td>\n",
       "      <td>52</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014-02-02</td>\n",
       "      <td>48</td>\n",
       "      <td>MetLife Stadium</td>\n",
       "      <td>East Rutherford</td>\n",
       "      <td>New Jersey</td>\n",
       "      <td>82529</td>\n",
       "      <td>Seattle Seahawks</td>\n",
       "      <td>43</td>\n",
       "      <td>Russell Wilson</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Pete Carroll</td>\n",
       "      <td>Denver Broncos</td>\n",
       "      <td>8</td>\n",
       "      <td>Peyton Manning</td>\n",
       "      <td>NaN</td>\n",
       "      <td>John Fox</td>\n",
       "      <td>51</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date  super_bowl                          venue             city  \\\n",
       "0  2018-02-04          52              U.S. Bank Stadium      Minneapolis   \n",
       "1  2017-02-05          51                    NRG Stadium          Houston   \n",
       "2  2016-02-07          50                 Levi's Stadium      Santa Clara   \n",
       "3  2015-02-01          49  University of Phoenix Stadium         Glendale   \n",
       "4  2014-02-02          48                MetLife Stadium  East Rutherford   \n",
       "\n",
       "        state  attendance           team_winner  winning_pts     qb_winner_1  \\\n",
       "0   Minnesota       67612   Philadelphia Eagles           41      Nick Foles   \n",
       "1       Texas       70807  New England Patriots           34       Tom Brady   \n",
       "2  California       71088        Denver Broncos           24  Peyton Manning   \n",
       "3     Arizona       70288  New England Patriots           28       Tom Brady   \n",
       "4  New Jersey       82529      Seattle Seahawks           43  Russell Wilson   \n",
       "\n",
       "  qb_winner_2    coach_winner            team_loser  losing_pts  \\\n",
       "0         NaN   Doug Pederson  New England Patriots          33   \n",
       "1         NaN  Bill Belichick       Atlanta Falcons          28   \n",
       "2         NaN     Gary Kubiak     Carolina Panthers          10   \n",
       "3         NaN  Bill Belichick      Seattle Seahawks          24   \n",
       "4         NaN    Pete Carroll        Denver Broncos           8   \n",
       "\n",
       "       qb_loser_1 qb_loser_2     coach_loser  combined_pts  difference_pts  \n",
       "0       Tom Brady        NaN  Bill Belichick            74               8  \n",
       "1       Matt Ryan        NaN       Dan Quinn            62               6  \n",
       "2      Cam Newton        NaN      Ron Rivera            34              14  \n",
       "3  Russell Wilson        NaN    Pete Carroll            52               4  \n",
       "4  Peyton Manning        NaN        John Fox            51              35  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>super_bowl</th>\n",
       "      <th>network</th>\n",
       "      <th>avg_us_viewers</th>\n",
       "      <th>total_us_viewers</th>\n",
       "      <th>rating_household</th>\n",
       "      <th>share_household</th>\n",
       "      <th>rating_18_49</th>\n",
       "      <th>share_18_49</th>\n",
       "      <th>ad_cost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>52</td>\n",
       "      <td>NBC</td>\n",
       "      <td>103390000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43.1</td>\n",
       "      <td>68</td>\n",
       "      <td>33.4</td>\n",
       "      <td>78.0</td>\n",
       "      <td>5000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>51</td>\n",
       "      <td>Fox</td>\n",
       "      <td>111319000</td>\n",
       "      <td>172000000.0</td>\n",
       "      <td>45.3</td>\n",
       "      <td>73</td>\n",
       "      <td>37.1</td>\n",
       "      <td>79.0</td>\n",
       "      <td>5000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>50</td>\n",
       "      <td>CBS</td>\n",
       "      <td>111864000</td>\n",
       "      <td>167000000.0</td>\n",
       "      <td>46.6</td>\n",
       "      <td>72</td>\n",
       "      <td>37.7</td>\n",
       "      <td>79.0</td>\n",
       "      <td>5000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>49</td>\n",
       "      <td>NBC</td>\n",
       "      <td>114442000</td>\n",
       "      <td>168000000.0</td>\n",
       "      <td>47.5</td>\n",
       "      <td>71</td>\n",
       "      <td>39.1</td>\n",
       "      <td>79.0</td>\n",
       "      <td>4500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>48</td>\n",
       "      <td>Fox</td>\n",
       "      <td>112191000</td>\n",
       "      <td>167000000.0</td>\n",
       "      <td>46.7</td>\n",
       "      <td>69</td>\n",
       "      <td>39.3</td>\n",
       "      <td>77.0</td>\n",
       "      <td>4000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   super_bowl network  avg_us_viewers  total_us_viewers  rating_household  \\\n",
       "0          52     NBC       103390000               NaN              43.1   \n",
       "1          51     Fox       111319000       172000000.0              45.3   \n",
       "2          50     CBS       111864000       167000000.0              46.6   \n",
       "3          49     NBC       114442000       168000000.0              47.5   \n",
       "4          48     Fox       112191000       167000000.0              46.7   \n",
       "\n",
       "   share_household  rating_18_49  share_18_49  ad_cost  \n",
       "0               68          33.4         78.0  5000000  \n",
       "1               73          37.1         79.0  5000000  \n",
       "2               72          37.7         79.0  5000000  \n",
       "3               71          39.1         79.0  4500000  \n",
       "4               69          39.3         77.0  4000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>super_bowl</th>\n",
       "      <th>musician</th>\n",
       "      <th>num_songs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>52</td>\n",
       "      <td>Justin Timberlake</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>52</td>\n",
       "      <td>University of Minnesota Marching Band</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>51</td>\n",
       "      <td>Lady Gaga</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>50</td>\n",
       "      <td>Coldplay</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>50</td>\n",
       "      <td>Beyoncé</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   super_bowl                               musician  num_songs\n",
       "0          52                      Justin Timberlake       11.0\n",
       "1          52  University of Minnesota Marching Band        1.0\n",
       "2          51                              Lady Gaga        7.0\n",
       "3          50                               Coldplay        6.0\n",
       "4          50                                Beyoncé        3.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Import pandas\n",
    "import pandas as pd\n",
    "\n",
    "# Load csv data\n",
    "super_bowls = pd.read_csv('super_bowls.csv')\n",
    "tv = pd.read_csv('tv.csv')\n",
    "half_musicians = pd.read_csv('halftime_musicians.csv')\n",
    "\n",
    "# Display first 5 rows for each data\n",
    "display(super_bowls.head())\n",
    "display(tv.head())\n",
    "display(half_musicians.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### We can see that qb_winner_2 and qb_loser_2 has lots of missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 52 entries, 0 to 51\n",
      "Data columns (total 18 columns):\n",
      "date              52 non-null object\n",
      "super_bowl        52 non-null int64\n",
      "venue             52 non-null object\n",
      "city              52 non-null object\n",
      "state             52 non-null object\n",
      "attendance        52 non-null int64\n",
      "team_winner       52 non-null object\n",
      "winning_pts       52 non-null int64\n",
      "qb_winner_1       52 non-null object\n",
      "qb_winner_2       2 non-null object\n",
      "coach_winner      52 non-null object\n",
      "team_loser        52 non-null object\n",
      "losing_pts        52 non-null int64\n",
      "qb_loser_1        52 non-null object\n",
      "qb_loser_2        3 non-null object\n",
      "coach_loser       52 non-null object\n",
      "combined_pts      52 non-null int64\n",
      "difference_pts    52 non-null int64\n",
      "dtypes: int64(6), object(12)\n",
      "memory usage: 7.4+ KB\n",
      "\n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 53 entries, 0 to 52\n",
      "Data columns (total 9 columns):\n",
      "super_bowl          53 non-null int64\n",
      "network             53 non-null object\n",
      "avg_us_viewers      53 non-null int64\n",
      "total_us_viewers    15 non-null float64\n",
      "rating_household    53 non-null float64\n",
      "share_household     53 non-null int64\n",
      "rating_18_49        15 non-null float64\n",
      "share_18_49         6 non-null float64\n",
      "ad_cost             53 non-null int64\n",
      "dtypes: float64(4), int64(4), object(1)\n",
      "memory usage: 3.9+ KB\n",
      "\n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 134 entries, 0 to 133\n",
      "Data columns (total 3 columns):\n",
      "super_bowl    134 non-null int64\n",
      "musician      134 non-null object\n",
      "num_songs     88 non-null float64\n",
      "dtypes: float64(1), int64(1), object(1)\n",
      "memory usage: 3.3+ KB\n"
     ]
    }
   ],
   "source": [
    "# Summary for superbowl\n",
    "super_bowls.info()\n",
    "\n",
    "print('\\n')\n",
    "\n",
    "# Summary for tv\n",
    "tv.info()\n",
    "\n",
    "print('\\n')\n",
    "\n",
    "# Summary for halftime musicians\n",
    "half_musicians.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### total_us_viewrs, rating_18_49 and share_18_49 in TV data also have lots of missing values.\n",
    "### num_sings in Half Musicians data has missing value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAewAAAFXCAYAAABgJ33WAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAZSUlEQVR4nO3de1BU5/3H8c+6qygqgrg2Yxgd8BJr4yRNjPFCJEatSaMSNdbLiDW0NlEYq43+REO8UhGtthhj1TbpxUs0jUikTjumYqM0uONokkYDdmxSrUAzKkQFLyxwfn+YrBoFF3UPPPB+/RWWhefL44Y3Z1nOcViWZQkAANRrTep6AAAAcHsEGwAAAxBsAAAMQLABADAAwQYAwAAEGwAAA7jqeoCanD59odYfExYWrJKSiwGYpuFhr/zHXtUO++U/9sp/jWWv3O7Wt7y9wR1hu1zOuh7BGOyV/9ir2mG//Mde+a+x71WDCzYAAA0RwQYAwAAEGwAAAxBsAAAMQLABADAAwQYAwAAEGwAAAxBsAAAMQLABADBAQIP98ccfKy4uTpJ04sQJjR8/XhMmTNCCBQtUVVUVyKUBAGhQAhbs3/zmN0pOTtaVK1ckSampqZoxY4a2bNkiy7K0Z8+eQC0NAECDE7Bgd+zYUa+99prv7aNHj6p3796SpAEDBuiDDz4I1NIAADQ4Abta19ChQ3Xq1Cnf25ZlyeFwSJJatmypCxdufyWusLDgOzrZe3VXOsHN2Cv/3cu9Gv7yu/fscwVK1srYu/p4Hlv+Y6/815j3yrbLazZpcu1gvqysTCEhIbf9mDu5jJrb3fqOLsvZGLFX/muMe3U3X29j3K87xV75r7HsVZ1fXrNHjx7yeDySpH379qlXr152LQ0AgPFsC/acOXP02muvaezYsfJ6vRo6dKhdSwMAYLyAPiUeERGht99+W5IUGRmpTZs2BXI5AAAaLE6cAgCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAVx2Lub1epWUlKSCggI1adJES5YsUefOne0cAQAAI9l6hP3++++roqJCW7duVUJCgn71q1/ZuTwAAMayNdiRkZGqrKxUVVWVSktL5XLZeoAPAICxbC1mcHCwCgoK9Mwzz6ikpETr1q2r8f5hYcFyuZy1Xsftbn2nIzY67JX/Gtte3e3X29j2626wV/5rzHtla7B///vfKzo6Wi+//LKKior0wx/+UFlZWQoKCrrl/UtKLtZ6Dbe7tU6fvnC3ozYK7JX/GuNe3c3X2xj3606xV/5rLHtV3Q8ltgY7JCRETZs2lSS1adNGFRUVqqystHMEAACMZGuwJ0+erHnz5mnChAnyer2aOXOmgoOD7RwBAAAj2Rrsli1bKj093c4lAQBoEDhxCgAABiDYAAAYgGADAGAAgg0AgAEINgAABiDYAAAYgGADAGAAgg0AgAEINgAABiDYAAAYgGADAGAAgg0AgAEINgAABiDYAAAYgGADAGAAgg0AgAEINgAABiDYAAAYgGADAGAAgg0AgAEINgAABiDYAAAYgGADAGAAV10PAKB+il+WXdcj1OjNpKfqegTAVhxhAwBgAIINAIABCDYAAAYg2AAAGIBgAwBgAIINAIABCDYAAAYg2AAAGIBgAwBgAIINAIABCDYAAAYg2AAAGIBgAwBgAIINAIABCDYAAAYg2AAAGIBgAwBgAIINAIABCDYAAAYg2AAAGIBgAwBgAIINAIABCDYAAAYg2AAAGIBgAwBgAJfdC65fv17Z2dnyer0aP368xowZY/cIAAAYx9Zgezweffjhh3rrrbd06dIlvfnmm3YuDwCAsWwNdk5Ojrp166aEhASVlpbq//7v/+xcHgAAY9ka7JKSEhUWFmrdunU6deqUpk6dqr/+9a9yOBy3vH9YWLBcLmet13G7W9/tqHVm+Mvv1vUIt5W1MrauR6gTJj+uGqKG9O/RkL6WQGvMe2VrsENDQxUVFaVmzZopKipKQUFBKi4uVnh4+C3vX1JysdZruN2tdfr0hbsdFTVojPvL46r+aSj/Hjy2/NdY9qq6H0psfZX4o48+qv3798uyLH3xxRe6dOmSQkND7RwBAAAj+XWEvXXrVo0bN+6uFxs4cKAOHjyo559/XpZlaf78+XI6a/+UNwAAjY1fwd60adM9CbYkXmgGAMAd8CvY9913nyZNmqSHHnpIQUFBvtsTExMDNhgAALjGr2A//PDDgZ4DAADUwK9gJyYm6uLFizp58qS6deumy5cvKzg4ONCzAQCAr/j1KvHc3FzFxsZq2rRpOnv2rAYOHKicnJxAzwYAAL7iV7BXrVqlLVu2KCQkRG63W5s3b9by5csDPRsAAPiKX8GuqqqS2+32vd2lS5eADQQAAG7m96vE9+7dK4fDofPnz2vz5s3q0KFDoGcDAABf8esIe/HixcrKylJRUZEGDx6svLw8LV68ONCzAQCAr/h1hB0eHq5Vq1aptLRUTqdTLVq0CPRcAADgOn4F+9ixY0pKSlJhYaEkKSoqSmlpaerYsWNAhwMAAFf59ZT4ggULNGPGDHk8Hnk8HsXHx2vevHmBng0AAHzFr2BfuXJFMTExvreHDBmi0tLSgA0FAABuVGOwCwsLVVhYqO7du2vDhg0qLi7WuXPntGnTJvXq1cuuGQEAaPRq/B32xIkT5XA4ZFmWPB6Ptm7d6nufw+FQcnJywAcEAAC3CXZ2drZdcwAAgBr49Srxzz77TG+//bbOnTt3w+2pqakBGQoAANzI76t1ff/739cDDzwQ6HkAAMAt+BXskJAQJSYmBnoWAABQDb+CPXLkSP3yl79Unz595HJd+5DHHnssYIMBAIBr/Ar2hx9+qMOHD+vw4cO+2xwOh/74xz8GbDAAAHCNX8E+evSodu/eHehZAABANfw601nXrl2Vn58f6FkAAEA1/P6zrpEjR8rtdqtp06ayLEsOh0N79uwJ9HwAAEB+Bvv1118P9BwwSPwyTqiDumfC4/DNpKfqeoQasYdm8SvYBw8evOXt999//z0dBgAA3JpfwfZ4PL7/9nq9OnTokHr16qXnnnsuYIMBAIBr/Ar2N09B+uWXX2rmzJkBGQgAANzMr1eJf1NwcLAKCgru9SwAAKAafh1hx8XFyeFwSJIsy9J///tfxcTEBHQwAABwTY3BLiwslCSNGjXKF+yIiAiFhoYqODg48NMBAABJtwn2xIkT5XA4ZFmW7zaHw6HTp0/L6/UqLy8v4AMCAIDbBDs7+8a/0SsrK1NaWppycnK0ZMmSgA4GAACu8ftFZ7m5uRoxYoQkaefOnerfv3/AhgIAADe67YvOLl68qGXLlvmOqgk1AAD2q/EIOzc3V8OHD5ckZWVlEWsAAOpIjUfYL7zwglwul3JycvSPf/zDdzsX/wAAwF41BpsgAwBQP9QYbC7uAQBA/XBHpyYFAAD2ItgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYIA6CfbZs2cVExOjf//733WxPAAAxrE92F6vV/Pnz1fz5s3tXhoAAGPZHuy0tDSNGzdO7du3t3tpAACMVePlNe+1jIwMtW3bVk888YQ2bNhw2/uHhQXL5XLWeh23u/WdjAcA91T8suy6HsF43/x+3pi/v9sa7O3bt8vhcCg3N1d5eXmaM2eOfv3rX8vtdt/y/iUlF2u9htvdWqdPX7jbUQEA9cD1388by/f36n4osTXYmzdv9v13XFycFi5cWG2sAQDANfxZFwAABrD1CPt6GzdurKulAQAwDkfYAAAYgGADAGAAgg0AgAEINgAABiDYAAAYgGADAGAAgg0AgAEINgAABiDYAAAYgGADAGAAgg0AgAEINgAABiDYAAAYgGADAGAAgg0AgAEINgAABiDYAAAYgGADAGAAgg0AgAEINgAABiDYAAAYgGADAGAAgg0AgAFcdT2A3eKXZdf1CAAA1BpH2AAAGIBgAwBgAIINAIABCDYAAAYg2AAAGIBgAwBgAIINAIABCDYAAAYg2AAAGIBgAwBgAIINAIABCDYAAAYg2AAAGIBgAwBgAIINAIABCDYAAAYg2AAAGIBgAwBgAIINAIABCDYAAAYg2AAAGIBgAwBgAIINAIABCDYAAAYg2AAAGMBl52Jer1fz5s1TQUGBysvLNXXqVA0aNMjOEQAAMJKtwd65c6dCQ0O1YsUKlZSUaOTIkQQbAAA/2Brsp59+WkOHDvW97XQ67VweAABj2Rrsli1bSpJKS0s1ffp0zZgxo8b7h4UFy+WqfdTd7tZ3NB8AoH6JX5Zd1yPUKGtlrG1r2RpsSSoqKlJCQoImTJig4cOH13jfkpKLtf78bndrnT594U7HAwDAb4HoTXUHnbYG+8yZM4qPj9f8+fPVt29fO5cGAMBotv5Z17p163T+/HmtXbtWcXFxiouL0+XLl+0cAQAAI9l6hJ2cnKzk5GQ7lwQAoEHgxCkAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABiAYAMAYACCDQCAAQg2AAAGINgAABjAZediVVVVWrhwoY4dO6ZmzZopJSVFnTp1snMEAACMZOsR9t/+9jeVl5dr27Ztevnll7Vs2TI7lwcAwFi2BvvQoUN64oknJEkPP/ywjhw5YufyAAAYy9anxEtLS9WqVSvf206nUxUVFXK5bj2G2936jtap6eOyVsbe0ecEAKAu2XqE3apVK5WVlfnerqqqqjbWAADgGluD/cgjj2jfvn2SpI8++kjdunWzc3kAAIzlsCzLsmuxr18l/q9//UuWZWnp0qXq3LmzXcsDAGAsW4MNAADuDCdOAQDAAAQbAAADGP0Sba/Xq3nz5qmgoEDl5eWaOnWqunTpoqSkJDkcDnXt2lULFixQkyb8XFJZWank5GR9/vnncjqdSk1NlWVZ7FUNzp49q1GjRunNN9+Uy+Vir6rx3HPPqXXrq39KGRERobFjx+rnP/+5nE6noqOjlZiYWMcT1i/r169Xdna2vF6vxo8fr969e/PYuoWMjAzt2LFDknTlyhXl5eVp48aNjfuxZRnsnXfesVJSUizLsqzi4mIrJibGevHFF60DBw5YlmVZr776qrV79+66HLHeeO+996ykpCTLsizrwIED1ksvvcRe1aC8vNyaNm2a9b3vfc86fvw4e1WNy5cvW7GxsTfcNmLECOvEiRNWVVWV9eMf/9g6cuRIHU1X/xw4cMB68cUXrcrKSqu0tNRavXo1jy0/LFy40Nq6dWujf2wZ/WPc008/rZ/+9Ke+t51Op44eParevXtLkgYMGKAPPvigrsarVwYPHqwlS5ZIkgoLC9WuXTv2qgZpaWkaN26c2rdvL0nsVTXy8/N16dIlxcfHa9KkSTp48KDKy8vVsWNHORwORUdHKzc3t67HrDdycnLUrVs3JSQk6KWXXtKTTz7JY+s2PvnkEx0/flzPPvtso39sGR3sli1bqlWrViotLdX06dM1Y8YMWZYlh8Phe/+FCxfqeMr6w+Vyac6cOVqyZImGDh3KXlUjIyNDbdu29Z1GVxJ7VY3mzZvrRz/6kd544w0tWrRIc+fOVYsWLXzvZ69uVFJSoiNHjig9PV2LFi3SrFmzeGzdxvr165WQkHDTmTIb414Z/TtsSSoqKlJCQoImTJig4cOHa8WKFb73lZWVKSQkpA6nq3/S0tI0a9Ys/eAHP9CVK1d8t7NX12zfvl0Oh0O5ubnKy8vTnDlzVFxc7Hs/e3VNZGSkOnXqJIfDocjISLVu3Vpffvml7/3s1Y1CQ0MVFRWlZs2aKSoqSkFBQfrf//7nez/7daPz58/rs88+U58+fVRaWnrDmTIb414ZfYR95swZxcfHa/bs2Xr++eclST169JDH45Ek7du3T7169arLEeuNzMxMrV+/XpLUokULORwOPfjgg+zVLWzevFmbNm3Sxo0b9e1vf1tpaWkaMGAAe3UL77zzju+qe1988YUuXbqk4OBgnTx5UpZlKScnh726zqOPPqr9+/fLsizffvXt25fHVjUOHjyofv36Sbp6auumTZs26seW0SdOSUlJ0V/+8hdFRUX5bnvllVeUkpIir9erqKgopaSkyOl01uGU9cPFixc1d+5cnTlzRhUVFZoyZYo6d+6sV199lb2qQVxcnBYuXKgmTZqwV7dQXl6uuXPnqrCwUA6HQ7NmzVKTJk20dOlSVVZWKjo6WjNnzqzrMeuV5cuXy+PxyLIszZw5UxERETy2qvHb3/5WLpdLkydPlnT1lNaN+bFldLABAGgsjH5KHACAxoJgAwBgAIINAIABCDYAAAYg2AAAGIBgAzYrLS3VokWLNGzYMMXGxiouLk5Hjx69J5/7qaee0qlTp266PT09XXv27Lnrz+/xeBQXF3fT7UlJSXryyScVGxur2NhYPfPMM9q0aVONn+uTTz7RK6+8UuN99u7dq9/97nd3NTPQUBh/pjPAJFVVVZoyZYoef/xxZWZmyuVy6cCBA5oyZYp27dqlsLCwgKx7/Tn3A2X69OkaNWqUpKsnNRoyZIj69u2rzp073/L+PXv2VM+ePWv8nEeOHLnncwKmItiAjTwej4qKijR9+nTfJRT79Omj1NRUVVVVSZLWrVunnTt3yul0qn///po9e7bvFLxRUVE6fvy4evTooe9+97vasWOHzp07p9dff90XxjVr1ig/P19BQUFatGiRunfvrqSkJPXu3Vu9e/dWYmKiunbtqry8PIWHhys9PV2hoaHat2+fVq9erYqKCkVERGjJkiUKCwtTTk6OUlNTFRQUpMjISL++znbt2ikyMlLHjx9XZGSkli5dqtzcXDkcDo0YMUI/+clP5PF4tGbNGm3cuFFxcXHq2bOnDh06pOLiYiUnJ+v+++/X1q1bJUkdOnRQhw4dfKcebtOmjVauXKm2bdve638ioN7iKXHARp9++qm6d+9+0/WOY2JiFB4ervfff1/Z2dnavn27duzYoRMnTviidezYMU2ZMkXvvvuuDh8+rIKCAm3btk3Dhg3Ttm3bfJ+rU6dOyszM1LRp05SUlHTTDPn5+XrhhRf05z//WSEhIcrKylJxcbFWrlypN954Q5mZmYqOjtYvfvELlZeXKykpSatXr1ZGRoaaN2/u19eZn5+vkydP6jvf+Y7eeustFRUVaefOnfrTn/6k3bt36+9///tNH+P1erVt2zbNnTtX6enp6tKli8aNG6dx48Zp9OjRWrt2rRYuXKiMjAz169dPn376aS12HjAfR9iAjZo0aaKgoKBq33/gwAE9++yzvitejR49WpmZmYqJiVG7du3Uo0cPSdJ9992nvn37Srp69Hn9763HjBkj6eoPAbNnz9b58+dvWCM8PNz3ebp27apz587p448/VlFRkSZNmiTp6lP3bdq00bFjx9S+fXvf0fvIkSOVnp5+y9lXr16tP/zhD6qqqlLz5s21ePFiRUREyOPxaOTIkXI6nWrRooWGDx+u3NxcPfXUUzd8/NdXR+vatesNFxD52qBBg5SYmKjBgwdr0KBB6t+/f7X7CDREBBuw0YMPPqgtW7bccElFSVq1apX69evne1r8ehUVFZKkZs2a3XB7deebvv52y7Lkct34v/n1PzA4HA5ZlqXKyko98sgjWrdunSTpypUrKisrU2Fhoa4/e3FN57i+/nfY1/vm1/T1et/09VzX78v1Jk+erIEDB2rv3r1asWKF/vnPf2rq1KnVzgM0NDwlDtioV69eCg8P15o1a3zR2r9/vzIyMtSlSxf16dNHu3bt0uXLl1VRUaHt27erT58+tVojKytLkvTee++pc+fOCg4Ovu3HPPTQQ/roo4/0+eefS5LWrl2r5cuX64EHHtCZM2eUn58vSdq1a1etZpGu/o4+MzNTlZWVunTpkrKysvT444/79bFOp9P3A8uYMWNUVlamyZMna/LkyTwljkaHI2zARg6HQ2vXrlVqaqqGDRsml8ulsLAwbdiwQe3atdPAgQOVl5en0aNHq6KiQtHR0Zo4ceIN10y+nf/85z+KjY1Vy5YtfZe+vB23262lS5dqxowZqqqq0re+9S2tWLFCTZs21apVqzR79my5XC7fU+m1MXbsWN9MXq9Xw4cP15AhQ3yXlKzJY489pjlz5qhdu3b62c9+pqSkJLlcLgUHByslJaXWswAm42pdAAAYgKfEAQAwAMEGAMAABBsAAAMQbAAADECwAQAwAMEGAMAABBsAAAMQbAAADPD/3J8SD/byEJUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn')\n",
    "\n",
    "# Histogram for combined points \n",
    "plt.hist(super_bowls['combined_pts'])\n",
    "plt.xlabel('Combined Points')\n",
    "plt.ylabel('Number')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23    San Francisco 49ers\n",
       "Name: team_winner, dtype: object"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "45    Miami Dolphins\n",
       "Name: team_winner, dtype: object"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "max_pts = max(super_bowls['combined_pts'])\n",
    "min_pts = min(super_bowls['combined_pts'])\n",
    "\n",
    "display(super_bowls['team_winner'][super_bowls['combined_pts'] == max_pts])\n",
    "display(super_bowls['team_winner'][super_bowls['combined_pts'] == min_pts])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### San Francisco 49ers earned the most combined points!!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>super_bowl</th>\n",
       "      <th>venue</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>attendance</th>\n",
       "      <th>team_winner</th>\n",
       "      <th>winning_pts</th>\n",
       "      <th>qb_winner_1</th>\n",
       "      <th>qb_winner_2</th>\n",
       "      <th>coach_winner</th>\n",
       "      <th>team_loser</th>\n",
       "      <th>losing_pts</th>\n",
       "      <th>qb_loser_1</th>\n",
       "      <th>qb_loser_2</th>\n",
       "      <th>coach_loser</th>\n",
       "      <th>combined_pts</th>\n",
       "      <th>difference_pts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1990-01-28</td>\n",
       "      <td>24</td>\n",
       "      <td>Louisiana Superdome</td>\n",
       "      <td>New Orleans</td>\n",
       "      <td>Louisiana</td>\n",
       "      <td>72919</td>\n",
       "      <td>San Francisco 49ers</td>\n",
       "      <td>55</td>\n",
       "      <td>Joe Montana</td>\n",
       "      <td>NaN</td>\n",
       "      <td>George Seifert</td>\n",
       "      <td>Denver Broncos</td>\n",
       "      <td>10</td>\n",
       "      <td>John Elway</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Dan Reeves</td>\n",
       "      <td>65</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          date  super_bowl                venue         city      state  \\\n",
       "28  1990-01-28          24  Louisiana Superdome  New Orleans  Louisiana   \n",
       "\n",
       "    attendance          team_winner  winning_pts  qb_winner_1 qb_winner_2  \\\n",
       "28       72919  San Francisco 49ers           55  Joe Montana         NaN   \n",
       "\n",
       "      coach_winner      team_loser  losing_pts  qb_loser_1 qb_loser_2  \\\n",
       "28  George Seifert  Denver Broncos          10  John Elway        NaN   \n",
       "\n",
       "   coach_loser  combined_pts  difference_pts  \n",
       "28  Dan Reeves            65              45  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>super_bowl</th>\n",
       "      <th>venue</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>attendance</th>\n",
       "      <th>team_winner</th>\n",
       "      <th>winning_pts</th>\n",
       "      <th>qb_winner_1</th>\n",
       "      <th>qb_winner_2</th>\n",
       "      <th>coach_winner</th>\n",
       "      <th>team_loser</th>\n",
       "      <th>losing_pts</th>\n",
       "      <th>qb_loser_1</th>\n",
       "      <th>qb_loser_2</th>\n",
       "      <th>coach_loser</th>\n",
       "      <th>combined_pts</th>\n",
       "      <th>difference_pts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1991-01-27</td>\n",
       "      <td>25</td>\n",
       "      <td>Tampa Stadium</td>\n",
       "      <td>Tampa</td>\n",
       "      <td>Florida</td>\n",
       "      <td>73813</td>\n",
       "      <td>New York Giants</td>\n",
       "      <td>20</td>\n",
       "      <td>Jeff Hostetler</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Bill Parcells</td>\n",
       "      <td>Buffalo Bills</td>\n",
       "      <td>19</td>\n",
       "      <td>Jim Kelly</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Marv Levy</td>\n",
       "      <td>39</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          date  super_bowl          venue   city    state  attendance  \\\n",
       "27  1991-01-27          25  Tampa Stadium  Tampa  Florida       73813   \n",
       "\n",
       "        team_winner  winning_pts     qb_winner_1 qb_winner_2   coach_winner  \\\n",
       "27  New York Giants           20  Jeff Hostetler         NaN  Bill Parcells   \n",
       "\n",
       "       team_loser  losing_pts qb_loser_1 qb_loser_2 coach_loser  combined_pts  \\\n",
       "27  Buffalo Bills          19  Jim Kelly        NaN   Marv Levy            39   \n",
       "\n",
       "    difference_pts  \n",
       "27               1  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot histogram of point difference\n",
    "plt.hist(super_bowls['difference_pts'])\n",
    "plt.xlabel('Point Difference')\n",
    "plt.ylabel('Number')\n",
    "plt.show()\n",
    "\n",
    "# Maximum / Minimum point difference\n",
    "max_diff = max(super_bowls['difference_pts'])\n",
    "min_diff = min(super_bowls['difference_pts'])\n",
    "\n",
    "# display super bowls summary with max / min point difference\n",
    "display(super_bowls[super_bowls['difference_pts'] == max_diff])\n",
    "display(super_bowls[super_bowls['difference_pts'] == min_diff])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Most of the games have less point difference.\n",
    "### We can check if there is a relationship between Household Share and point difference\n",
    "### Does blowouts lose viewers interest?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1dc719f7c88>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Join super bowl data and tv data with super bowl more than one\n",
    "game_tv = pd.merge(tv[tv['super_bowl']>1], super_bowls, on='super_bowl')\n",
    "\n",
    "# import seaborn\n",
    "import seaborn as sns\n",
    "\n",
    "# Create a scatter plot with a regression model fit\n",
    "sns.regplot('difference_pts','share_household',data = game_tv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### The slope and 95% confidence interval for this regression model shows\n",
    "### that the more point difference the less share household."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###### AD Industry ######\n",
    "\n",
    "### Relation with Share Household and Advertising cost\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x396 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Advertising cost\n",
    "plt.subplot(3,1,1)\n",
    "plt.plot('super_bowl','ad_cost',data =tv,color='b')\n",
    "plt.title('Advertising Cost')\n",
    "\n",
    "# Average US Viewers\n",
    "plt.subplot(3,1,2)\n",
    "plt.plot('super_bowl','avg_us_viewers',data=tv,color='r')\n",
    "plt.title('Average US Viewers')\n",
    "\n",
    "# Share Household\n",
    "plt.subplot(3,1,3)\n",
    "plt.plot('super_bowl','share_household',data=tv,color='y')\n",
    "plt.title('Share Household')\n",
    "\n",
    "# Improve spacing between subplots\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Viewers increased before Advertising cost did."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###### Half Time Musicians ######\n",
    "### Who performed the most song in Half Time Show?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 134 entries, 0 to 133\n",
      "Data columns (total 3 columns):\n",
      "super_bowl    134 non-null int64\n",
      "musician      134 non-null object\n",
      "num_songs     88 non-null float64\n",
      "dtypes: float64(1), int64(1), object(1)\n",
      "memory usage: 3.3+ KB\n"
     ]
    }
   ],
   "source": [
    "half_musicians.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>super_bowl</th>\n",
       "      <th>musician</th>\n",
       "      <th>num_songs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>52</td>\n",
       "      <td>Justin Timberlake</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>30</td>\n",
       "      <td>Diana Ross</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>49</td>\n",
       "      <td>Katy Perry</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>21</td>\n",
       "      <td>Spirit of Troy</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>23</td>\n",
       "      <td>Elvis Presto</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>51</td>\n",
       "      <td>Lady Gaga</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>41</td>\n",
       "      <td>Prince</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>47</td>\n",
       "      <td>Beyoncé</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>18</td>\n",
       "      <td>The Florida State University Marching Chiefs</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>48</td>\n",
       "      <td>Bruno Mars</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    super_bowl                                      musician  num_songs\n",
       "0           52                             Justin Timberlake       11.0\n",
       "70          30                                    Diana Ross       10.0\n",
       "10          49                                    Katy Perry        8.0\n",
       "95          21                                Spirit of Troy        8.0\n",
       "90          23                                  Elvis Presto        7.0\n",
       "2           51                                     Lady Gaga        7.0\n",
       "33          41                                        Prince        7.0\n",
       "16          47                                       Beyoncé        7.0\n",
       "99          18  The Florida State University Marching Chiefs        7.0\n",
       "14          48                                    Bruno Mars        6.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Musicians who performed the most in one game is !!!\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>super_bowl</th>\n",
       "      <th>musician</th>\n",
       "      <th>num_songs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>52</td>\n",
       "      <td>Justin Timberlake</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   super_bowl           musician  num_songs\n",
       "0          52  Justin Timberlake       11.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Musicians without band\n",
    "musicians_no_band = half_musicians[~half_musicians.musician.str.contains('Band')]\n",
    "\n",
    "musicians = musicians_no_band.dropna()\n",
    "\n",
    "# Histogram : Number of Songs per Show\n",
    "plt.hist(musicians.num_songs)\n",
    "plt.xlabel('Number of Songs per Half Time Show Performances')\n",
    "plt.ylabel('Number of Musicians')\n",
    "plt.show()\n",
    "\n",
    "# Sort musicians by number of song \n",
    "musicians = musicians.sort_values('num_songs',ascending = False)\n",
    "display(musicians.head(10))\n",
    "print('\\n')\n",
    "\n",
    "# Musicians who performed the most : \n",
    "print(\"Musicians who performed the most in one game is !!!\")\n",
    "max_num = max(musicians['num_songs'])\n",
    "display(musicians[musicians['num_songs'] == max_num])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Most of the musicians sing 1~3 songs per half time show\n",
    "### Because there is a time limit, number of song shows how many hit music \n",
    "### each musicians has. The more hit songs they have the more songs they perform."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
